=begin
	Rakefile to compile, link and run the test harness
=end

WIRE_PATH="../wire-server"
UNITY="../../unity-master/src"
COVERAGE_FLAGS = "-fprofile-arcs -ftest-coverage"
C_FLAGS = "-Werror -I. -I#{UNITY} -I#{WIRE_PATH}"

EXEC = "./bin/main.out"
LIB = "#{WIRE_PATH}/lib/wire.a"

header_files = %w(context.h
	port-tests.h
	misc-tests.h
	unity-tests.h
	tcp-client.h
	handle-request-tests.h
	handle-step-match-tests.h
	buffer-tests.h
	token-handling-tests.h)

file_roots = %w(main
	../../unity-master/src/unity
	context
	tcp-client
	port-tests
	misc-tests
	handle-request-tests
	handle-step-match-tests
	buffer-tests
	token-handling-tests)

file_roots.each do |element|
    file "obj/#{File.basename(element)}.o" => header_files + ["#{element}.c"] do
        puts "Compiling #{element}"
        fail unless system "cc #{C_FLAGS} -c #{element}.c -o obj/#{File.basename(element)}.o"
    end
end

obj_files = file_roots.map {|item| "obj/" + File.basename(item) + ".o"}

desc "Default task will build and run the tests"
task :default => [:run]

file "#{EXEC}" => obj_files do
	puts "Linking #{EXEC}"
	list = "cc -o #{EXEC} " +  obj_files.join(" ") + " ../wire-server/obj/api.o #{LIB} -lpthread > /dev/null"
    system "#{list}"
end

desc "Compiles and links the test program"
task :build => "#{EXEC}" do
	puts "#{EXEC} built."
end

desc "Runs the test program"
task :run => [:build] do
	puts "Running tests"
	retVal = system("#{EXEC}")
	fail unless retVal
	fail unless system "../wire-server/bin/wire.out 3901 1 0 & cucumber"
end

desc "Removes artefacts"
task :clean do 
	system "rm -f obj/* > /dev/null"
	system "rm -f bin/* > /dev/null"
end
